using UnityEngine;
using UnityEngine.InputSystem;
using System.Collections.Generic;

public class QTEManager : MonoBehaviour
{
    public RectTransform targetZone;
    public RectTransform spawnPoint;
    public GameObject heartPrefab;
    public float speed = 400f;
    public float pauseOnFailDuration = 1f; // ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ fail (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    public RectTransform qteTrack; // ‡πÄ‡∏û‡∏¥‡πà‡∏° reference ‡πÑ‡∏õ QTETrack
    public float minSpawnDelay = 0.5f; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à
    public float maxSpawnDelay = 2f; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à

    private List<RectTransform> activeHearts = new List<RectTransform>(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
    private bool isMoving = false;
    private bool isPaused = false;
    private float pauseTimer = 0f;
    private int score = 0;
    private int missCount = 0;
    private float nextSpawnTime = 0f;
    private bool isQTEActive = false; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î QTE
    private CanvasGroup canvasGroup; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á UI
    private Coroutine spawnDelayCoroutine; // ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á coroutine

    void Start()
    {
        // Auto-detect QTETrack ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        if (qteTrack == null)
        {
            qteTrack = GetComponent<RectTransform>();
            if (qteTrack != null)
            {
                Debug.Log("üéØ Auto-detected QTETrack: " + gameObject.name);
            }
        }
        
        // ‡∏´‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏û‡∏¥‡πà‡∏° CanvasGroup component
        canvasGroup = GetComponent<CanvasGroup>();
        if (canvasGroup == null)
        {
            canvasGroup = gameObject.AddComponent<CanvasGroup>();
        }
        
        // ‡∏ã‡πà‡∏≠‡∏ô QTE UI ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        HideQTE();
    }

    void Update()
    {
        // ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤ QTE ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        if (!isQTEActive) return;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pause timer
        if (isPaused)
        {
            pauseTimer -= Time.deltaTime;
            if (pauseTimer <= 0)
            {
                isPaused = false;
            }
            return; // ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á pause ‡∏≠‡∏¢‡∏π‡πà
        }

        // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
        MoveAllHearts();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ spawn ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
        if (Time.time >= nextSpawnTime && !isPaused)
        {
            SpawnHeartPair();
        }

        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Input System ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
        bool spacePressed = false;
        
        try
        {
            // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Input System ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô
            if (Keyboard.current != null)
            {
                spacePressed = Keyboard.current.spaceKey.wasPressedThisFrame;
            }
        }
        catch
        {
            // ‡∏´‡∏≤‡∏Å Input System ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
            spacePressed = false;
        }
        
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏î space ‡∏à‡∏≤‡∏Å Input System ‡πÉ‡∏´‡∏°‡πà ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
        if (!spacePressed)
        {
            try
            {
                spacePressed = Input.GetKeyDown(KeyCode.Space);
            }
            catch
            {
                // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                spacePressed = false;
            }
        }
        
        if (spacePressed)
        {
            CheckHit();
        }
    }

    void MoveAllHearts()
    {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á QTETrack
        float trackLeftBound = 0f;
        if (qteTrack != null)
        {
            trackLeftBound = qteTrack.anchoredPosition.x - (qteTrack.rect.width / 2);
        }
        else
        {
            trackLeftBound = -600f;
        }

        // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö
        for (int i = activeHearts.Count - 1; i >= 0; i--)
        {
            if (activeHearts[i] != null)
            {
                activeHearts[i].anchoredPosition += Vector2.left * speed * Time.deltaTime;

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å QTETrack ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                float heartRightEdge = activeHearts[i].anchoredPosition.x + (activeHearts[i].rect.width / 2);
                if (heartRightEdge < trackLeftBound)
                {
                    missCount++;
                    Debug.Log($"‚ùå FAIL! ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å QTETrack ‡πÅ‡∏•‡πâ‡∏ß! Miss: {missCount}");
                    Destroy(activeHearts[i].gameObject);
                    activeHearts.RemoveAt(i);
                    
                    // ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                    isPaused = true;
                    pauseTimer = pauseOnFailDuration;
                }
            }
            else
            {
                activeHearts.RemoveAt(i);
            }
        }
    }

    void SpawnHeartPair()
    {
        if (!isQTEActive) return; // ‡πÑ‡∏°‡πà spawn ‡∏ñ‡πâ‡∏≤ QTE ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î
        
        // Spawn ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏•‡∏π‡∏Å‡πÅ‡∏£‡∏Å
        SpawnSingleHeart();
        
        // Spawn ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 0.2-0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏´‡∏±‡∏ß‡πÉ‡∏à)
        if (spawnDelayCoroutine != null)
        {
            StopCoroutine(spawnDelayCoroutine);
        }
        spawnDelayCoroutine = StartCoroutine(SpawnSecondHeartDelayed());
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤ spawn ‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡πÑ‡∏õ (random)
        nextSpawnTime = Time.time + Random.Range(minSpawnDelay, maxSpawnDelay);
    }

    System.Collections.IEnumerator SpawnSecondHeartDelayed()
    {
        yield return new WaitForSeconds(Random.Range(0.2f, 0.5f));
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤ QTE ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!isPaused && isQTEActive)
        {
            SpawnSingleHeart();
        }
        
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå reference
        spawnDelayCoroutine = null;
    }

    void SpawnSingleHeart()
    {
        // ‡πÑ‡∏°‡πà spawn ‡∏ñ‡πâ‡∏≤ QTE ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        if (!isQTEActive)
        {
            Debug.Log("‚ö†Ô∏è ‡πÑ‡∏°‡πà spawn ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏û‡∏£‡∏≤‡∏∞ QTE ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà");
            return;
        }
        
        if (heartPrefab == null)
        {
            Debug.LogError("HeartPrefab ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô Inspector!");
            return;
        }

        GameObject newHeart = Instantiate(heartPrefab, transform);
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        newHeart.name = $"HeartIndicator(Clone)_{Time.time:F2}";
        
        RectTransform heartRect = newHeart.GetComponent<RectTransform>();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ RectTransform ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (heartRect == null)
        {
            Debug.LogError("HeartPrefab ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ RectTransform component! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...");
            heartRect = newHeart.AddComponent<RectTransform>();
            
            if (heartRect == null)
            {
                Debug.LogError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° RectTransform ‡πÑ‡∏î‡πâ! ‡∏•‡∏ö GameObject ‡πÅ‡∏•‡πâ‡∏ß");
                Destroy(newHeart);
                return;
            }
        }
        
        if (spawnPoint != null)
        {
            heartRect.anchoredPosition = spawnPoint.anchoredPosition;
        }
        else
        {
            Debug.LogError("SpawnPoint ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô Inspector!");
            heartRect.anchoredPosition = Vector2.zero;
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ list
        activeHearts.Add(heartRect);
        isMoving = true;
        
        Debug.Log($"üíñ Spawn ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÉ‡∏´‡∏°‡πà: {newHeart.name} (‡∏£‡∏ß‡∏°: {activeHearts.Count} ‡∏ï‡∏±‡∏ß)");
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    public int GetScore()
    {
        return score;
    }

    public int GetMissCount()
    {
        return missCount;
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå clones)
    public void ResetGame()
    {
        score = 0;
        missCount = 0;
        isPaused = false;
        pauseTimer = 0f;
        nextSpawnTime = Time.time + 1f;
        
        // ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÉ‡∏ô list ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô scene)
        foreach (RectTransform heart in activeHearts)
        {
            if (heart != null)
            {
                Destroy(heart.gameObject);
            }
        }
        activeHearts.Clear();
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
        SpawnHeartPair();
        Debug.Log("üîÑ ‡πÄ‡∏Å‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß!");
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î QTE (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å PlayerInteract)
    public void StartQTE()
    {
        isQTEActive = true;
        ShowQTE();
        
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå clones ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        ClearAllHeartClones();
        
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå clones ‡∏≠‡∏µ‡∏Å
        score = 0;
        missCount = 0;
        isPaused = false;
        pauseTimer = 0f;
        nextSpawnTime = Time.time + 1f;
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
        SpawnHeartPair();
        Debug.Log("üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏° QTE - ‡∏Å‡∏î‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß!");
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î QTE (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å PlayerInteract)
    public void StopQTE()
    {
        isQTEActive = false;
        
        // ‡∏´‡∏¢‡∏∏‡∏î coroutine ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Å‡∏≥‡∏•‡∏±‡∏á spawn ‡∏≠‡∏¢‡∏π‡πà
        if (spawnDelayCoroutine != null)
        {
            StopCoroutine(spawnDelayCoroutine);
            spawnDelayCoroutine = null;
        }
        
        // ‡∏´‡∏¢‡∏∏‡∏î coroutines ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß)
        StopAllCoroutines();
        
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå HeartIndicator clones ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        ClearAllHeartClones();
        
        // ‡∏ã‡πà‡∏≠‡∏ô UI
        HideQTE();
        Debug.Log("üõë ‡∏´‡∏¢‡∏∏‡∏î QTE - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß!");
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πà‡∏≠‡∏ô QTE UI
    void HideQTE()
    {
        if (canvasGroup != null)
        {
            canvasGroup.alpha = 0f;
            canvasGroup.interactable = false;
            canvasGroup.blocksRaycasts = false;
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á QTE UI
    void ShowQTE()
    {
        if (canvasGroup != null)
        {
            canvasGroup.alpha = 1f;
            canvasGroup.interactable = true;
            canvasGroup.blocksRaycasts = true;
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå HeartIndicator clones ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    void ClearAllHeartClones()
    {
        // ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô activeHearts list ‡∏Å‡πà‡∏≠‡∏ô
        foreach (RectTransform heart in activeHearts)
        {
            if (heart != null)
            {
                Destroy(heart.gameObject);
            }
        }
        activeHearts.Clear();
        
        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå clones ‡πÉ‡∏ô scene
        StartCoroutine(DelayedClearAllClones());
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå clones ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
    System.Collections.IEnumerator DelayedClearAllClones()
    {
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ spawn ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
        yield return new WaitForSeconds(0.1f);
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ GameObject ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö HeartIndicator
        GameObject[] allObjects = FindObjectsOfType<GameObject>();
        int clearedCount = 0;
        
        foreach (GameObject obj in allObjects)
        {
            // ‡∏Ç‡πâ‡∏≤‡∏° GameObject ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô 0.2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
            if (obj != null && obj != heartPrefab)
            {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
                if ((obj.name.Contains("HeartIndicator") && obj.name.Contains("Clone")) ||
                    obj.name.StartsWith("HeartIndicator(Clone)") ||
                    obj.name.Contains("HeartIndicator(Clone)_"))
                {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô activeHearts (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á)
                    bool isInActiveList = false;
                    RectTransform objRect = obj.GetComponent<RectTransform>();
                    if (objRect != null)
                    {
                        foreach (RectTransform activeHeart in activeHearts)
                        {
                            if (activeHeart == objRect)
                            {
                                isInActiveList = true;
                                break;
                            }
                        }
                    }
                    
                    // ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô active list
                    if (!isInActiveList)
                    {
                        Destroy(obj);
                        clearedCount++;
                    }
                }
            }
        }
        
        if (clearedCount > 0)
        {
            Debug.Log($"üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå HeartIndicator clones ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {clearedCount} ‡∏ï‡∏±‡∏ß");
        }
    }

    void CheckHit()
    {
        if (activeHearts.Count == 0 || isPaused) 
        {
            return;
        }

        if (targetZone == null)
        {
            Debug.LogError("TargetZone ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô Inspector!");
            return;
        }

        bool hitAny = false;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô
        for (int i = activeHearts.Count - 1; i >= 0; i--)
        {
            if (activeHearts[i] != null)
            {
                float heartLeft = activeHearts[i].anchoredPosition.x - (activeHearts[i].rect.width / 2);
                float heartRight = activeHearts[i].anchoredPosition.x + (activeHearts[i].rect.width / 2);
                float zoneLeft = targetZone.anchoredPosition.x - (targetZone.rect.width / 2);
                float zoneRight = targetZone.anchoredPosition.x + (targetZone.rect.width / 2);

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (heartRight > zoneLeft && heartLeft < zoneRight)
                {
                    score++;
                    hitAny = true;
                    Debug.Log($"‚úÖ PERFECT HIT! Score: {score}");
                    
                    // ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏ï‡πà‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏±‡∏á‡∏•‡∏≠‡∏¢‡∏ï‡πà‡∏≠)
                    Destroy(activeHearts[i].gameObject);
                    activeHearts.RemoveAt(i);
                    break; // ‡∏ï‡∏µ 1 ‡∏•‡∏π‡∏Å‡∏ï‡πà‡∏≠ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏î
                }
            }
        }
        
        if (!hitAny)
        {
            missCount++;
            Debug.Log($"‚ùå MISS! ‡∏Å‡∏î‡∏ú‡∏¥‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞! Miss: {missCount}");
            
            // ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ miss
            isPaused = true;
            pauseTimer = pauseOnFailDuration;
        }
    }
}
